#!/usr/bin/env ruby

raise "Needs 1.9+" if RUBY_VERSION < "1.9.0"
PERIOD = 24*60*60
API_METRICS_LIMIT = 100
class MissingFieldError < Exception
end

def stats(options)
  response = Faraday.new(
    :url => "https://api.newrelic.com/api/v1/accounts/#{ACCOUNT_ID}/applications/#{APP_ID}/data.json",
    :params => options,
    :headers => {"x-api-key" => API_KEY}
  ).get

  if response.status != 200
    if response.body.include?("The field you use must be valid for at least one metric.")
      raise MissingFieldError
    else
      raise response.body
    end
  end

  JSON.parse(response.body)
end

def aggregate(metric_names, field)
  metric_names.each_slice(API_METRICS_LIMIT).map do |group|
    stats(:metrics => group, :field => field, :begin => Time.now - PERIOD, :end => Time.now)
  end.flatten(1)
end

def metrics
  response = `curl -H "x-api-key:#{API_KEY}" https://api.newrelic.com/api/v1/applications/#{APP_ID}/metrics.json`
  JSON.parse(response)
end

def parse_options
  banner = nil
  OptionParser.new do |opts|
    banner = opts
    opts.banner = <<-BANNER.gsub(" "*6, "")
      Analyze newrelic data.

      Usage:
          statsn-calls API-KEY ACCOUNT-ID APPLICATION-ID METRIC-NAME
          statsn-calls asdhgjasdgjhdasjgahsdasdjghsdjhg 123 1234567 Controller/users/index

          statsn-calls API-KEY ACCOUNT-ID APPLICATION-ID METRIC-PREFIX
          statsn-calls asdhgjasdgjhdasjgahsdasdjghsdjhg 123 1234567 Controller/users/*

      Options:
      BANNER
    opts.on("-h", "--help", "Show this.") { puts opts; exit }
  end.parse!
  banner
end

def metric_names(namespace)
  if namespace.end_with?("*")
    namespace = namespace.sub("*", "")
    metrics.select { |m| m["name"].start_with?(namespace) }.map { |m| m["name"] }
  else
    [namespace]
  end
end

def data_for_field(metric_names, field)
  metric_data = aggregate(metric_names, field)
  metric_data = metric_data.group_by { |x| x["name"] }
  metric_data.map { |_, values| values.inject(0) { |sum, x| sum + x[field] } }.inject(:+)
rescue MissingFieldError
  :missing_field
end

# Dependencies
gem "json"
gem "faraday"

require "json"
require "faraday"
require "optparse"

# ARGS
options = parse_options
unless ARGV.size == 4
  puts options
  exit 1
end
API_KEY, ACCOUNT_ID, APP_ID, namespace = ARGV

# Data
metric_names = metric_names(namespace)

results = ["call_count", "total_call_time"].map do |field|
  [field, data_for_field(metric_names, field)]
end

# Display results
results = Hash[results]
call_time = results["total_call_time"]
call_count = results["call_count"]

if call_time && call_count
  puts results.reject{ |name,value| value == :missing_field }.map{ |x| x.join(": ") }
  puts "response time: #{call_time / call_count}" unless call_time == :missing_field
  puts "call per second: #{call_count / PERIOD}"
else
  puts "No data found for #{metric_names.join(", ")} in last #{PERIOD} seconds"
  exit 1
end
